.icon-font (@icon, @font: FontAwesome) {
	content: @icon;
	font-weight: normal;
	font-style: normal;
	font-family: @font;
	-webkit-font-smoothing: antialiased;
	line-height: 100%;
}

.placeholder(@color: @placeholderText) {
	:-moz-placeholder { // Firefox 4-18
		color: @color;
	}
	::-moz-placeholder { // Firefox 19+
		color: @color;
	}
	::-ms-input-placeholder { // Internet Explorer 10+
		color: @color;
	}
	::-webkit-input-placeholder { // Safari and Chrome
		color: @color;
	}
}

.clearfix() {
	&:before,
	&:after {
		content: " "; /* 1 */
		display: table; /* 2 */
	}
	&:after {
		clear: both;
	}
}

.opacity(@opacity: 0.5) {
	-moz-opacity: @opacity;
	-khtml-opacity: @opacity;
	-webkit-opacity: @opacity;
	opacity: @opacity;
	@opperc: @opacity * 100;
	-ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=@{opperc})";
	filter: ~"alpha(opacity=@{opperc})";
}

.animation-duration(@duration) {
	-webkit-animation-duration: @duration;
	-moz-animation-duration: @duration;
	-o-animation-duration: @duration;
	animation-duration: @duration;
}

.animation-delay(@delay) {
	-webkit-animation-delay: @delay;
	-moz-animation-delay: @delay;
	-o-animation-delay: @delay;
	animation-delay: @delay;
}

.animation-spin() {

	-webkit-animation: spin 1s infinite linear;
	-moz-animation: spin 1s infinite linear;
	-o-animation: spin 1s infinite linear;
	animation: spin 1s infinite linear; 

	@-moz-keyframes spin {
	  0% {
		-moz-transform: rotate(0deg); }

	  100% {
		-moz-transform: rotate(359deg); } }

	@-webkit-keyframes spin {
	  0% {
		-webkit-transform: rotate(0deg); }

	  100% {
		-webkit-transform: rotate(359deg); } }

	@-o-keyframes spin {
	  0% {
		-o-transform: rotate(0deg); }

	  100% {
		-o-transform: rotate(359deg); } }

	@-ms-keyframes spin {
	  0% {
		-ms-transform: rotate(0deg); }

	  100% {
		-ms-transform: rotate(359deg); } }

	@keyframes spin {
	  0% {
		transform: rotate(0deg); }

	  100% {
		transform: rotate(359deg); } }
}

/*
https://github.com/matthewlein/Ceaser/tree/master/developer
*/
// Cubic
@easeInCubic : cubic-bezier(0.550, 0.055, 0.675, 0.190);
@easeOutCubic : cubic-bezier(0.215, 0.610, 0.355, 1.000);
@easeInOutCubic : cubic-bezier(0.645, 0.045, 0.355, 1.000);

// Circ
@easeInCirc : cubic-bezier(0.600, 0.040, 0.980, 0.335);
@easeOutCirc : cubic-bezier(0.075, 0.820, 0.165, 1.000);
@easeInOutCirc : cubic-bezier(0.785, 0.135, 0.150, 0.860);

// Expo
@easeInExpo : cubic-bezier(0.950, 0.050, 0.795, 0.035);
@easeOutExpo : cubic-bezier(0.190, 1.000, 0.220, 1.000);
@easeInOutExpo : cubic-bezier(1.000, 0.000, 0.000, 1.000);

// Quad
@easeInQuad : cubic-bezier(0.550, 0.085, 0.680, 0.530);
@easeOutQuad : cubic-bezier(0.250, 0.460, 0.450, 0.940);
@easeInOutQuad : cubic-bezier(0.455, 0.030, 0.515, 0.955);

// Quart
@easeInQuart : cubic-bezier(0.895, 0.030, 0.685, 0.220);
@easeOutQuart : cubic-bezier(0.165, 0.840, 0.440, 1.000);
@easeInOutQuart : cubic-bezier(0.770, 0.000, 0.175, 1.000);

// Quint
@easeInQuint : cubic-bezier(0.755, 0.050, 0.855, 0.060);
@easeOutQuint : cubic-bezier(0.230, 1.000, 0.320, 1.000);
@easeInOutQuint : cubic-bezier(0.860, 0.000, 0.070, 1.000);

// Sine
@easeInSine : cubic-bezier(0.470, 0.000, 0.745, 0.715);
@easeOutSine : cubic-bezier(0.390, 0.575, 0.565, 1.000);
@easeInOutSine : cubic-bezier(0.445, 0.050, 0.550, 0.950);

// Back
@easeInBack : cubic-bezier(0.600, -0.280, 0.735, 0.045);
@easeOutBack : cubic-bezier(0.175, 0.885, 0.320, 1.275);
@easeInOutBack : cubic-bezier(0.680, -0.550, 0.265, 1.550);

// cubic-bezier
@cubic-bezier : cubic-bezier(0.175, 0.885, 0.320, 1.275);

